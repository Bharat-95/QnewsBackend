const express = require("express");
const AWS = require("aws-sdk");
const multer = require("multer");
const { v4: uuidv4 } = require("uuid");
const axios = require('axios');
const schedule = require("node-schedule");
const cron = require("node-cron");

const router = express.Router();
const s3 = new AWS.S3();
const dynamoDB = new AWS.DynamoDB.DocumentClient();
const table = "Voted";

// AWS DynamoDB Configuration


router.post("/", async (req, res) => {
    const { name, phone, vote } = req.body;
    console.log("Received Vote:", req.body);
  
    // ‚úÖ Validate Input
    if (!name || !phone || !vote) {
      return res.status(400).json({ message: "‚ùå ‡∞Ö‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø." });
    }
  
    try {
      // ‚úÖ Check if Phone Number Already Voted
      const existingVote = await dynamoDB
        .get({
          TableName: table,
          Key: { phone },
        })
        .promise();
  
      if (existingVote.Item) {
        return res.status(400).json({ message: "üìå ‡∞´‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞ì‡∞ü‡±Å ‡∞µ‡±á‡∞∂‡∞æ‡∞∞‡±Å!" });
      }
  
      // ‚úÖ Prepare Vote Data for Insertion
      const voteId = uuidv4(); // Generate a Unique ID
      const item = {
        voteId,
        name,
        phone,
        vote,
        timestamp: new Date().toISOString(), // Store Submission Time
      };
  
      // ‚úÖ Save Vote to DynamoDB
      await dynamoDB
        .put({
          TableName: table,
          Item: item,
        })
        .promise();
  
      return res.status(200).json({ message: "‚úÖ ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å! ‡∞Æ‡±Ä ‡∞ì‡∞ü‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±à‡∞Ç‡∞¶‡∞ø." });
    } catch (error) {
      console.error("DynamoDB error:", error);
      return res.status(500).json({ message: "‚ùå ‡∞∏‡∞∞‡±ç‡∞µ‡∞∞‡±ç ‡∞∏‡∞Æ‡∞∏‡±ç‡∞Ø, ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø." });
    }
  });

module.exports = router;